{"ast":null,"code":"var _jsxFileName = \"/Users/ccosat1isd/Documents/Good_Fortune/GoodFortune/src/App.js\";\n////////////////\n// DEPENDENCIES\n////////////////\n// packages\nimport React, { Component } from 'react'; // data\n\nimport fortunes from './data.js';\nimport nightFortunes from './data2.js';\nconsole.log(fortunes);\nconsole.log(nightFortunes); ////////////////\n// METHODS\n////////////////\n////////////////\n// COMPONENT\n////////////////\n\nclass App extends Component {\n  // is this the proper way to set the state? Should it be an empty set of strings if I want a string from either array to be returned?\n  constructor() {\n    super();\n    this.state = {\n      fortune: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  } // because we used this.state.userChoice in the chooseRandomFortune, we need to bind the \"this\" to the constructor.\n  // componentDidMount() {\n  //   this.chooseRandomFortune()\n  // } // This was a test to see if the Random Fortune worked. Because it only renders one time and won't create a never ending loop.\n\n\n  handleChange(choice) {\n    if (choice === 'moonlight') {\n      // grab a random fortune from nightFortunes\n      // randomVal is calculating a random index number x the length of one array\n      let randomVal = Math.floor(Math.random() * nightFortunes.fortunes.length);\n      let randomFortune = nightFortunes.fortunes[randomVal]; // update state\n\n      this.setState({\n        fortune: randomFortune\n      });\n      console.log('this is randomVal', randomVal, randomFortune);\n    } else {\n      // grab a random fortune from dayFortunes\n      let randomDayVal = Math.floor(Math.random() * fortunes.fortunes.length);\n      let randomDayFortune = dayFortunes.fortunes[randomDayVal];\n      this.setState({\n        fortune: randomDayFortune\n      });\n    }\n  }\n\n  render() {\n    console.log(this.state);\n    return React.createElement(\"div\", {\n      className: \"fortune-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Good Fortune to You, Stranger...\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"May the future smile upon you.\")), React.createElement(\"div\", {\n      className: \"lightSelection\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Now, make your choice.\"), React.createElement(\"select\", {\n      id: \"lightType\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"Select\"), React.createElement(\"option\", {\n      value: \"daylight\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"Daylight\"), React.createElement(\"option\", {\n      value: \"moonlight\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Moonlight\")), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, this.state.fortune.fortune)));\n  }\n\n} // this.state.fortune.fortune refers to the state in the super constructor of \"fortune\" + the \"fortune\" key in the fortunes array.\n// <h4>{ fortunes.sample }</h4> // <-- This did not work. Tried putting it in the render under the <h3>. This didn't work because it's a Ruby method and doesn't work in JS. Oops.\n////////////////\n// EXPORT\n////////////////\n\n\nexport default App;","map":{"version":3,"sources":["/Users/ccosat1isd/Documents/Good_Fortune/GoodFortune/src/App.js"],"names":["React","Component","fortunes","nightFortunes","console","log","App","constructor","state","fortune","handleChange","bind","choice","randomVal","Math","floor","random","length","randomFortune","setState","randomDayVal","randomDayFortune","dayFortunes","render"],"mappings":";AAAA;AACA;AACA;AACA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,aAAP,MAA0B,YAA1B;AACAC,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACAE,OAAO,CAACC,GAAR,CAAYF,aAAZ,E,CAEA;AACA;AACA;AAIA;AACA;AACA;;AACA,MAAMG,GAAN,SAAkBL,SAAlB,CAA4B;AAC1B;AACAM,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAC;AADG,KAAb;AAGA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACD,GARyB,CAU1B;AAEA;AACA;AACA;;;AAEAD,EAAAA,YAAY,CAACE,MAAD,EAAS;AACpB,QAAGA,MAAM,KAAK,WAAd,EAA2B;AACzB;AACA;AACA,UAAIC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBb,aAAa,CAACD,QAAd,CAAuBe,MAAlD,CAAhB;AACA,UAAIC,aAAa,GAAGf,aAAa,CAACD,QAAd,CAAuBW,SAAvB,CAApB,CAJyB,CAKzB;;AACA,WAAKM,QAAL,CAAc;AACZV,QAAAA,OAAO,EAAES;AADG,OAAd;AAGAd,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCQ,SAAjC,EAA4CK,aAA5C;AACD,KAVD,MAUO;AACL;AACA,UAAIE,YAAY,GAAGN,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBd,QAAQ,CAACA,QAAT,CAAkBe,MAA7C,CAAnB;AACA,UAAII,gBAAgB,GAAGC,WAAW,CAACpB,QAAZ,CAAqBkB,YAArB,CAAvB;AACA,WAAKD,QAAL,CAAc;AACZV,QAAAA,OAAO,EAAEY;AADG,OAAd;AAGD;AACD;;AAEDE,EAAAA,MAAM,GAAG;AACPnB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKG,KAAjB;AACA,WACE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAFF,CADF,EAKE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADN,EAEM;AAAQ,MAAA,EAAE,EAAC,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AAAQ,MAAA,KAAK,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,EAGE;AAAQ,MAAA,KAAK,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAHF,CAFN,EAOG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,KAAKA,KAAL,CAAWC,OAAX,CAAmBA,OAAzB,CAPH,CALF,CADF;AAiBD;;AAxDyB,C,CA2D5B;AAEA;AAEA;AACA;AACA;;;AACA,eAAeH,GAAf","sourcesContent":["////////////////\n// DEPENDENCIES\n////////////////\n// packages\nimport React, { Component } from 'react';\n// data\nimport fortunes from './data.js'\nimport nightFortunes from './data2.js'\nconsole.log(fortunes);\nconsole.log(nightFortunes);\n\n////////////////\n// METHODS\n////////////////\n\n\n\n////////////////\n// COMPONENT\n////////////////\nclass App extends Component {\n  // is this the proper way to set the state? Should it be an empty set of strings if I want a string from either array to be returned?\n  constructor() {\n    super()\n    this.state = {\n      fortune:'',\n    }\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  // because we used this.state.userChoice in the chooseRandomFortune, we need to bind the \"this\" to the constructor.\n\n  // componentDidMount() {\n  //   this.chooseRandomFortune()\n  // } // This was a test to see if the Random Fortune worked. Because it only renders one time and won't create a never ending loop.\n\n  handleChange(choice) {\n   if(choice === 'moonlight') {\n     // grab a random fortune from nightFortunes\n     // randomVal is calculating a random index number x the length of one array\n     let randomVal = Math.floor(Math.random() * nightFortunes.fortunes.length)\n     let randomFortune = nightFortunes.fortunes[randomVal]\n     // update state\n     this.setState({\n       fortune: randomFortune\n     })\n     console.log('this is randomVal', randomVal, randomFortune)\n   } else {\n     // grab a random fortune from dayFortunes\n     let randomDayVal = Math.floor(Math.random() * fortunes.fortunes.length)\n     let randomDayFortune = dayFortunes.fortunes[randomDayVal]\n     this.setState({\n       fortune: randomDayFortune\n     })\n   }\n  }\n\n  render() {\n    console.log(this.state);\n    return (\n      <div className=\"fortune-container\">\n        <header>\n          <h1>Good Fortune to You, Stranger...</h1>\n          <h3>May the future smile upon you.</h3>\n        </header>\n        <div className=\"lightSelection\">\n              <h3>Now, make your choice.</h3>\n              <select id=\"lightType\">\n                <option>Select</option>\n                <option value=\"daylight\">Daylight</option>\n                <option value=\"moonlight\">Moonlight</option>\n              </select>\n           <h4>{ this.state.fortune.fortune }</h4>\n           </div>\n      </div>\n    )\n  }\n}\n\n// this.state.fortune.fortune refers to the state in the super constructor of \"fortune\" + the \"fortune\" key in the fortunes array.\n\n// <h4>{ fortunes.sample }</h4> // <-- This did not work. Tried putting it in the render under the <h3>. This didn't work because it's a Ruby method and doesn't work in JS. Oops.\n\n////////////////\n// EXPORT\n////////////////\nexport default App;\n"]},"metadata":{},"sourceType":"module"}