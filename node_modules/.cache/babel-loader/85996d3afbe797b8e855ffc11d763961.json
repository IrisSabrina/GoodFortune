{"ast":null,"code":"var _jsxFileName = \"/Users/ccosat1isd/Documents/Good_Fortune/GoodFortune/src/App.js\";\n////////////////\n// DEPENDENCIES\n////////////////\n// packages\nimport React, { Component } from 'react';\nimport FormContainer from './components/form'; // data\n\nimport fortunes from './data.js';\nimport nightFortunes from './data2.js'; // console.log(fortunes);\n// console.log(nightFortunes);\n////////////////\n// METHODS\n////////////////\n////////////////\n// COMPONENT\n////////////////\n\nclass App extends Component {\n  // is this the proper way to set the state? Should it be an empty set of strings if I want a string from either array to be returned?\n  constructor() {\n    super();\n    this.state = {\n      fortune: ''\n    };\n    this.handleFortune = this.handleFortune.bind(this);\n    this.clearFortune = this.clearFortune.bind(this);\n  } // because we used this.state.userChoice in the chooseRandomFortune, we need to bind the \"this\" to the constructor.\n  // componentDidMount() {\n  //   this.chooseRandomFortune()\n  // } // This was a test to see if the Random Fortune worked. Because it only renders one time and won't create a never ending loop.\n\n\n  handleFortune(choice) {\n    if (choice === 'moonlight') {\n      // grab a random fortune from night\n      // randomVal is calculating a random index number x the length of one array\n      let randomVal = Math.floor(Math.random() * nightFortunes.fortunes.length);\n      let randomFortune = nightFortunes.fortunes[randomVal]; // update state\n\n      this.setState({\n        fortune: randomFortune\n      });\n      console.log('this is randomVal', randomVal, randomFortune);\n    } else {\n      // grab a random fortune from day\n      let randomDayVal = Math.floor(Math.random() * fortunes.fortunes.length);\n      let randomDayFortune = fortunes.fortunes[randomDayVal];\n      this.setState({\n        fortune: randomDayFortune\n      });\n    }\n  }\n\n  clearFortune() {\n    this.setState({\n      fortune: ''\n    });\n  }\n\n  render() {\n    console.log(this.state);\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Fortunes for the Un/Fortunate\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"May the future smile upon you, Stranger...\"))), React.createElement(\"div\", {\n      className: \"yourFortune\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(FormContainer, {\n      handleFortune: this.handleFortune,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, this.state.fortune.fortune)), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.clearFortune,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Clear this fortune for now.\"));\n  }\n\n} // this.state.fortune.fortune refers to the state in the super constructor of \"fortune\" + the \"fortune\" key in the fortunes array.\n// <h4>{ fortunes.sample }</h4> // <-- This did not work. Tried putting it in the render under the <h3>. This didn't work because it's a Ruby method and doesn't work in JS. Oops.\n////////////////\n// EXPORT\n////////////////\n\n\nexport default App;","map":{"version":3,"sources":["/Users/ccosat1isd/Documents/Good_Fortune/GoodFortune/src/App.js"],"names":["React","Component","FormContainer","fortunes","nightFortunes","App","constructor","state","fortune","handleFortune","bind","clearFortune","choice","randomVal","Math","floor","random","length","randomFortune","setState","console","log","randomDayVal","randomDayFortune","render"],"mappings":";AAAA;AACA;AACA;AACA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,mBAA1B,C,CACA;;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,aAAP,MAA0B,YAA1B,C,CACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;;AACA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAC1B;AACAK,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAC;AADG,KAAb;AAGA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACD,GATyB,CAW1B;AAEA;AACA;AACA;;;AAEAD,EAAAA,aAAa,CAACG,MAAD,EAAS;AACrB,QAAGA,MAAM,KAAK,WAAd,EAA2B;AACzB;AACA;AACA,UAAIC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBZ,aAAa,CAACD,QAAd,CAAuBc,MAAlD,CAAhB;AACA,UAAIC,aAAa,GAAGd,aAAa,CAACD,QAAd,CAAuBU,SAAvB,CAApB,CAJyB,CAKzB;;AACA,WAAKM,QAAL,CAAc;AACZX,QAAAA,OAAO,EAAEU;AADG,OAAd;AAGAE,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCR,SAAjC,EAA4CK,aAA5C;AACD,KAVD,MAUO;AACL;AACA,UAAII,YAAY,GAAGR,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBb,QAAQ,CAACA,QAAT,CAAkBc,MAA7C,CAAnB;AACA,UAAIM,gBAAgB,GAAGpB,QAAQ,CAACA,QAAT,CAAkBmB,YAAlB,CAAvB;AACA,WAAKH,QAAL,CAAc;AACZX,QAAAA,OAAO,EAAEe;AADG,OAAd;AAGD;AACD;;AAEDZ,EAAAA,YAAY,GAAG;AACb,SAAKQ,QAAL,CAAc;AAAEX,MAAAA,OAAO,EAAE;AAAX,KAAd;AACD;;AAGDgB,EAAAA,MAAM,GAAG;AACPJ,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKd,KAAjB;AACA,WACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDAFF,CADA,CADF,EAOE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,aAAD;AAAe,MAAA,aAAa,EAAE,KAAKE,aAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,KAAKF,KAAL,CAAWC,OAAX,CAAmBA,OAAzB,CAFH,CAPF,EAWE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,OAAO,EAAG,KAAKG,YAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAXF,CADF;AAeD;;AA5DyB,C,CA+D5B;AAEA;AAEA;AACA;AACA;;;AACA,eAAeN,GAAf","sourcesContent":["////////////////\n// DEPENDENCIES\n////////////////\n// packages\nimport React, { Component } from 'react';\nimport FormContainer from './components/form';\n// data\nimport fortunes from './data.js'\nimport nightFortunes from './data2.js'\n// console.log(fortunes);\n// console.log(nightFortunes);\n\n////////////////\n// METHODS\n////////////////\n\n\n\n////////////////\n// COMPONENT\n////////////////\nclass App extends Component {\n  // is this the proper way to set the state? Should it be an empty set of strings if I want a string from either array to be returned?\n  constructor() {\n    super()\n    this.state = {\n      fortune:'',\n    }\n    this.handleFortune = this.handleFortune.bind(this)\n    this.clearFortune = this.clearFortune.bind(this)\n  }\n\n  // because we used this.state.userChoice in the chooseRandomFortune, we need to bind the \"this\" to the constructor.\n\n  // componentDidMount() {\n  //   this.chooseRandomFortune()\n  // } // This was a test to see if the Random Fortune worked. Because it only renders one time and won't create a never ending loop.\n\n  handleFortune(choice) {\n   if(choice === 'moonlight') {\n     // grab a random fortune from night\n     // randomVal is calculating a random index number x the length of one array\n     let randomVal = Math.floor(Math.random() * nightFortunes.fortunes.length)\n     let randomFortune = nightFortunes.fortunes[randomVal]\n     // update state\n     this.setState({\n       fortune: randomFortune\n     })\n     console.log('this is randomVal', randomVal, randomFortune)\n   } else {\n     // grab a random fortune from day\n     let randomDayVal = Math.floor(Math.random() * fortunes.fortunes.length)\n     let randomDayFortune = fortunes.fortunes[randomDayVal]\n     this.setState({\n       fortune: randomDayFortune\n     })\n   }\n  }\n\n  clearFortune() {\n    this.setState({ fortune: ''})\n  }\n\n\n  render() {\n    console.log(this.state);\n    return (\n      <div className=\"container\">\n        <div className=\"header\">\n        <header>\n          <h1>Fortunes for the Un/Fortunate</h1>\n          <h3>May the future smile upon you, Stranger...</h3>\n        </header>\n        </div>\n        <div className=\"yourFortune\">\n          <FormContainer handleFortune={this.handleFortune}/>\n           <h4>{ this.state.fortune.fortune }</h4>\n        </div>\n        <button type=\"button\" onClick={ this.clearFortune }>Clear this fortune for now.</button>\n      </div>\n    )\n  }\n}\n\n// this.state.fortune.fortune refers to the state in the super constructor of \"fortune\" + the \"fortune\" key in the fortunes array.\n\n// <h4>{ fortunes.sample }</h4> // <-- This did not work. Tried putting it in the render under the <h3>. This didn't work because it's a Ruby method and doesn't work in JS. Oops.\n\n////////////////\n// EXPORT\n////////////////\nexport default App;\n"]},"metadata":{},"sourceType":"module"}